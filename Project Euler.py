# -*- coding: utf-8 -*-
"""
Created on Mon May  4 16:33:40 2020

@author: Mel
"""

'''P1: If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.'''


def p1():
    list_multiple = []
    for x in range(1000):
        if x % 3 == 0 or x % 5 == 0:
            list_multiple.append(x)
            sum(list_multiple)
    output = sum(list_multiple)
    print(output)


'''Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.   '''


def p2():
    overallSum = 0
    list_N = [1, 2]
    x = 0
    while list_N[x] + list_N[x+1] < 4000001:
        list_N.append(list_N[x] + list_N[x+1])
        x += 1
   # print(list_N)
    for y in list_N:
        if y % 2 == 0:
            # list_N.remove(y)
           # print(list_N)
            overallSum += y
    print(overallSum)


'''P3: What is the largest prime factor of the number 600851475143 ?'''


def is_prime(x):
    for i in range(2, x):
        if x % i == 0:
            return False
    return True


def PrimeFactorlist(inputval):
    PFlist = []
    counter = 0
    j = 2
    while j**2 < inputval:
        counter = counter + 1
        if counter == 2000000:
            percentDone = (j / inputval) * 100
            print("percent done:")
            print(percentDone)
            counter = 0
        if inputval % j == 0 and is_prime(j) == True:
            PFlist.append(j)
        j = j+1
    print(max(PFlist))

#inputval = 600851475143
# PrimeFactorlist(inputval)


''' P4:A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.
Find the largest palindrome made from the product of two 3-digit numbers.'''


def is_pnum(inputnum):
    NewStrList = []
    Str = format(inputnum)
    x = len(Str)
    for i in range(-1, -x-1, -1):
        NewStrList.append(Str[i])
    NewStr = "".join(NewStrList)
    if NewStr == Str:
        return True
    else:
        return False


def p4():
    maxpnum = 0
    for i in range(999, 99, -1):
        for j in range(i, 99, -1):
            pnum = i*j
            if maxpnum < pnum and is_pnum(pnum) == True:
                maxpnum = pnum
    print(maxpnum)


'''P5: 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?'''


def matterlist(x):
    list1 = list(range(x, 0, -1))
    for i in list1:
        index_i = list1.index(i)
        for j in list1[(index_i + 1):]:
            if i % j == 0:
                list1.remove(j)
    return list1


def p5(y):
    output = y
    i = 0

    lastindex = len(matterlist(y))

    while i < lastindex:
        divider = matterlist(y)[i]
        print(divider)
        if output % divider != 0:
            output = output + 1
            i = 0
            print(output)
        else:
            i = i + 1
            print(i)
    print(output)


'''P6: Find the difference between the sum of the squares of the first one hundred
 natural numbers and the square of the sum. '''


def p6():
    sum1 = 0
    for i in range(1, 101):
        temp1 = i**2
        sum1 = sum1 + temp1
    sum2 = sum(range(1, 101))
    output = sum2**2 - sum1
    print(output)


'''P7: What is the 10001st prime number?'''


def p7():
    i = 2
    count = 0
    while i > 1:
        if is_prime(i) == True:
            count = count + 1
            if count == 10001:
                print(i)
                return i
        i = i + 1


'''P8: Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. 
What is the value of this product? '''


def p8():
    num = "73167176531330624919225119674426574742355349194934\
96983520312774506326239578318016984801869478851843\
85861560789112949495459501737958331952853208805511\
12540698747158523863050715693290963295227443043557\
66896648950445244523161731856403098711121722383113\
62229893423380308135336276614282806444486645238749\
30358907296290491560440772390713810515859307960866\
70172427121883998797908792274921901699720888093776\
65727333001053367881220235421809751254540594752243\
52584907711670556013604839586446706324415722155397\
53697817977846174064955149290862569321978468622482\
83972241375657056057490261407972968652414535100474\
82166370484403199890008895243450658541227588666881\
16427171479924442928230863465674813919123162824586\
17866458359124566529476545682848912883142607690042\
24219022671055626321111109370544217506941658960408\
07198403850962455444362981230987879927244284909188\
84580156166097919133875499200524063689912560717606\
05886116467109405077541002256983155200055935729725\
71636269561882670428252483600823257530420752963450"

    maxvalue = 0
    l = len(num)

    for j in range(l-13):
        product = 1
        for i in range(j, j+13):
            product = product * int(num[i])
        if product > maxvalue:
            maxvalue = product
    print(maxvalue)


'''P9: There exists exactly one Pythagorean triplet for which a + b + c = 1000.
Find the product abc. '''


def is_pythagorean(a, b, c):
    if a**2 + b**2 == c**2 and a < b and b < c:
        return True


def p9():
    for a in range(1, 1001):
        for b in range(a+1, 1001):
            for c in range(b+1, 1001-a-b):
                if a+b+c == 1000 and is_pythagorean(a, b, c) == True:
                    return a*b*c


'''P10: The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17. 
Find the sum of all the primes below two million.'''


def p10():
    output = 2
    for n in range(3, 2000000, 2):
        if is_prime(n) == True:
            output = output + n
    return output
